// Variáveis globais
let currentInitiative = null;
let currentMetaIndex = null;
let metasList = [];
let resultadosList = [];
let allExpanded = false;
let activeStatusFilters = ['all'];
let activeSemesterFilters = ['all'];
let currentPage = 'todas'; // 'todas', 'porta-fora', 'porta-dentro'

// Elementos DOM
document.addEventListener('DOMContentLoaded', () => {
    // Inicializar elementos DOM
    const sidebar = document.getElementById('sidebar');
    const toggleSidebarBtn = document.getElementById('toggleSidebar');
    const mainContent = document.getElementById('mainContent');
    const initiativesList = document.getElementById('initiativesList');
    const searchInput = document.getElementById('searchInput');
    const expandAllBtn = document.getElementById('expandAllBtn');
    const filterBtn = document.getElementById('filterBtn');
    const editModal = document.getElementById('editModal');
    const editMetaModal = document.getElementById('editMetaModal');
    const filterModal = document.getElementById('filterModal');
    const closeModalBtns = document.querySelectorAll('.close-modal');
    const cancelEditBtn = document.getElementById('cancelEditBtn');
    const saveEditBtn = document.getElementById('saveEditBtn');
    const cancelMetaEditBtn = document.getElementById('cancelMetaEditBtn');
    const saveMetaEditBtn = document.getElementById('saveMetaEditBtn');
    const cancelFilterBtn = document.getElementById('cancelFilterBtn');
    const applyFilterBtn = document.getElementById('applyFilterBtn');
    const addResultadoBtn = document.getElementById('addResultadoBtn');
    const addMetaBtn = document.getElementById('addMetaBtn');
    const exportBtn = document.getElementById('exportBtn');
    const navItems = document.querySelectorAll('.nav-item');
    const metaProgressoInput = document.getElementById('metaProgresso');
    const progressoValueSpan = document.getElementById('progressoValue');

    // Carregar dados do localStorage se existirem
    const savedData = localStorage.getItem('initiatives');
    if (savedData) {
        initiatives = JSON.parse(savedData);
    }

    // Configurar navegação
    navItems.forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            const page = item.getAttribute('data-page');
            navigateToPage(page);
            
            // Atualizar classe ativa
            navItems.forEach(i => i.classList.remove('active'));
            item.classList.add('active');
        });
    });

    // Toggle sidebar
    toggleSidebarBtn.addEventListener('click', () => {
        sidebar.classList.toggle('collapsed');
        mainContent.classList.toggle('expanded');
    });

    // Inicializar a página
    loadInitiatives();
    updateStats();

    // Configurar event listeners
    searchInput.addEventListener('input', handleSearch);
    expandAllBtn.addEventListener('click', toggleExpandAll);
    filterBtn.addEventListener('click', openFilterModal);
    closeModalBtns.forEach(btn => btn.addEventListener('click', closeModals));
    cancelEditBtn.addEventListener('click', closeModals);
    saveEditBtn.addEventListener('click', saveInitiative);
    cancelMetaEditBtn.addEventListener('click', closeModals);
    saveMetaEditBtn.addEventListener('click', saveMetaEdit);
    cancelFilterBtn.addEventListener('click', closeModals);
    applyFilterBtn.addEventListener('click', applyFilters);
    addResultadoBtn.addEventListener('click', addResultado);
    addMetaBtn.addEventListener('click', addMeta);
    exportBtn.addEventListener('click', exportData);
    
    // Atualizar valor do progresso
    if (metaProgressoInput) {
        metaProgressoInput.addEventListener('input', () => {
            progressoValueSpan.textContent = metaProgressoInput.value;
        });
    }
    
    // Fechar modais ao clicar fora
    window.addEventListener('click', (e) => {
        if (e.target === editModal) {
            closeModals();
        }
        if (e.target === filterModal) {
            closeModals();
        }
        if (e.target === editMetaModal) {
            closeModals();
        }
    });
});

// Navegar para uma página específica
function navigateToPage(page) {
    currentPage = page;
    
    // Atualizar título da página
    const pageTitle = document.getElementById('pageTitle');
    const contentTitle = document.getElementById('contentTitle');
    const filterBadge = document.getElementById('filterBadge');
    
    switch (page) {
        case 'porta-fora':
            pageTitle.textContent = 'Painel Estratégico - Porta para fora';
            contentTitle.textContent = 'Iniciativas - Porta para fora';
            filterBadge.textContent = 'Porta para fora';
            filterBadge.classList.add('active');
            break;
        case 'porta-dentro':
            pageTitle.textContent = 'Painel Estratégico - Porta para dentro';
            contentTitle.textContent = 'Iniciativas - Porta para dentro';
            filterBadge.textContent = 'Porta para dentro';
            filterBadge.classList.add('active');
            break;
        default:
            pageTitle.textContent = 'Painel Estratégico';
            contentTitle.textContent = 'Objetivos Estratégicos';
            filterBadge.classList.remove('active');
            break;
    }
    
    // Carregar iniciativas filtradas
    loadInitiatives();
    updateStats();
}

// Carregar iniciativas na lista
function loadInitiatives(filteredList = null) {
    const initiativesList = document.getElementById('initiativesList');
    let list = filteredList || initiatives;
    
    // Filtrar por porta se necessário
    if (currentPage === 'porta-fora') {
        list = list.filter(initiative => initiative.Porta === 'Porta para fora');
    } else if (currentPage === 'porta-dentro') {
        list = list.filter(initiative => initiative.Porta === 'Porta para dentro');
    }
    
    initiativesList.innerHTML = '';
    
    if (list.length === 0) {
        initiativesList.innerHTML = '<div class="empty-state">Nenhuma iniciativa encontrada.</div>';
        return;
    }
    
    list.forEach(initiative => {
        // Criar elemento de iniciativa
        const initiativeElement = document.createElement('div');
        initiativeElement.className = 'initiative-item';
        
        // Calcular progresso total baseado no progresso de cada meta
        let totalProgresso = 0;
        let metasCompletas = 0;
        
        if (initiative.Metas && initiative.Metas.length > 0) {
            initiative.Metas.forEach(meta => {
                totalProgresso += meta.progresso || 0;
                if (meta.status === 'Concluído') {
                    metasCompletas++;
                }
            });
            
            totalProgresso = Math.round(totalProgresso / initiative.Metas.length);
        }
        
        // Criar cabeçalho da iniciativa
        const headerElement = document.createElement('div');
        headerElement.className = 'initiative-header';
        headerElement.innerHTML = `
            <div class="initiative-title">
                <i class="fas fa-chevron-right"></i>
                <h3>${initiative.Iniciativas}</h3>
            </div>
            <div class="initiative-actions">
                <div class="initiative-progress">
                    <span class="progress-text">${metasCompletas}/${initiative.Metas ? initiative.Metas.length : 0} metas</span>
                    <div class="progress-bar">
                        <div class="progress-value" style="width: ${totalProgresso}%; background-color: ${getProgressColor(initiative.FAROL_NO_TRIMESTRE)}"></div>
                    </div>
                </div>
                <span class="status-badge ${getStatusClass(initiative.FAROL_NO_TRIMESTRE)}">
                    ${getStatusIcon(initiative.FAROL_NO_TRIMESTRE)}
                    ${initiative.FAROL_NO_TRIMESTRE || 'Não definido'}
                </span>
                <button class="edit-btn" data-initiative="${initiative.id}">
                    <i class="fas fa-edit"></i>
                </button>
            </div>
        `;
        
        initiativeElement.appendChild(headerElement);
        
        // Criar detalhes da iniciativa
        const detailsElement = document.createElement('div');
        detailsElement.className = 'initiative-details';
        
        // Descrição
        let detailsContent = `
            <p class="initiative-description">${initiative.Descrição || ''}</p>
        `;
        
        // Resultados e Metas
        if (initiative.Resultados && initiative.Resultados.length > 0) {
            initiative.Resultados.forEach(resultado => {
                detailsContent += `
                    <div class="resultado-item">
                        <div class="resultado-header">
                            <i class="fas fa-bullseye"></i> Resultado: ${resultado.texto}
                        </div>
                        <div class="metas-container">
                `;
                
                // Filtrar metas por resultado
                const resultadoMetas = initiative.Metas.filter(meta => meta.resultadoId === resultado.id);
                
                if (resultadoMetas.length > 0) {
                    resultadoMetas.forEach(meta => {
                        detailsContent += `
                            <div class="meta-item">
                                <div class="meta-header">
                                    <div class="meta-text">${meta.texto}</div>
                                    <div class="meta-info">
                                        <span class="meta-semestre">${meta.semestre}</span>
                                        <span class="meta-status ${getMetaStatusClass(meta.status)}">
                                            ${getStatusIcon(meta.status)}
                                            ${meta.status}
                                        </span>
                                    </div>
                                </div>
                                <div class="meta-progress">
                                    <div class="meta-progress-value" style="width: ${meta.progresso}%; background-color: ${getProgressColor(meta.status)}"></div>
                                </div>
                                <div class="meta-actions">
                                    <button class="btn btn-sm btn-outline edit-meta-btn" data-initiative="${initiative.id}" data-meta-index="${meta.id}">
                                        <i class="fas fa-edit"></i> Editar Status
                                    </button>
                                </div>
                            </div>
                        `;
                    });
                } else {
                    detailsContent += `<p class="empty-state">Nenhuma meta associada a este resultado.</p>`;
                }
                
                detailsContent += `
                        </div>
                    </div>
                `;
            });
        }
        
        // Metadados
        detailsContent += `
            <div class="details-meta">
                <span>Líder:</span> ${initiative.LÍDER || 'Não definido'}
            </div>
            <div class="details-meta">
                <span>Porta:</span> ${initiative.Porta || 'Não definido'}
            </div>
            ${initiative.OBSERVAÇÕES ? `
            <div class="details-meta">
                <span>Observações:</span> ${initiative.OBSERVAÇÕES}
            </div>
            ` : ''}
        `;
        
        detailsElement.innerHTML = detailsContent;
        initiativeElement.appendChild(detailsElement);
        
        initiativesList.appendChild(initiativeElement);
        
        // Adicionar event listeners
        const header = initiativeElement.querySelector('.initiative-header');
        header.addEventListener('click', () => {
            const details = initiativeElement.querySelector('.initiative-details');
            const chevron = initiativeElement.querySelector('.initiative-title i');
            
            details.classList.toggle('active');
            
            if (details.classList.contains('active')) {
                chevron.classList.remove('fa-chevron-right');
                chevron.classList.add('fa-chevron-down');
            } else {
                chevron.classList.remove('fa-chevron-down');
                chevron.classList.add('fa-chevron-right');
            }
        });
        
        const editBtn = initiativeElement.querySelector('.edit-btn');
        editBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            const initiativeId = e.currentTarget.getAttribute('data-initiative');
            openEditModal(initiativeId);
        });
        
        // Adicionar event listeners para botões de edição de meta
        const editMetaBtns = initiativeElement.querySelectorAll('.edit-meta-btn');
        editMetaBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const initiativeId = e.currentTarget.getAttribute('data-initiative');
                const metaId = e.currentTarget.getAttribute('data-meta-index');
                openEditMetaModal(initiativeId, metaId);
            });
        });
    });
}

// Atualizar estatísticas
function updateStats() {
    let filteredInitiatives = [...initiatives];
    
    // Filtrar por porta se necessário
    if (currentPage === 'porta-fora') {
        filteredInitiatives = filteredInitiatives.filter(initiative => initiative.Porta === 'Porta para fora');
    } else if (currentPage === 'porta-dentro') {
        filteredInitiatives = filteredInitiatives.filter(initiative => initiative.Porta === 'Porta para dentro');
    }
    
    const totalInitiatives = filteredInitiatives.length;
    
    let totalGoals = 0;
    let completedGoals = 0;
    let totalProgress = 0;
    
    filteredInitiatives.forEach(initiative => {
        if (initiative.Metas && Array.isArray(initiative.Metas)) {
            totalGoals += initiative.Metas.length;
            
            initiative.Metas.forEach(meta => {
                totalProgress += meta.progresso || 0;
                if (meta.status === 'Concluído') {
                    completedGoals++;
                }
            });
        }
    });
    
    const completionPercentage = totalGoals > 0 
        ? Math.round(totalProgress / totalGoals) 
        : 0;
    
    document.getElementById('totalInitiatives').textContent = totalInitiatives;
    document.getElementById('totalGoals').textContent = totalGoals;
    document.getElementById('completedGoals').textContent = completedGoals;
    document.getElementById('completionPercentage').textContent = `${completionPercentage}%`;
    document.getElementById('overallProgress').style.width = `${completionPercentage}%`;
}

// Funções auxiliares
function getStatusClass(status) {
    if (!status) return '';
    
    switch (status.toLowerCase()) {
        case 'no prazo':
            return 'no-prazo';
        case 'em risco':
            return 'em-risco';
        case 'concluído':
            return 'concluida';
        case 'não iniciado':
            return 'nao-iniciada';
        case 'em andamento':
            return 'em-andamento';
        default:
            return '';
    }
}

function getMetaStatusClass(status) {
    if (!status) return '';
    
    switch (status.toLowerCase()) {
        case 'não iniciado':
            return 'nao-iniciada';
        case 'em andamento':
            return 'em-andamento';
        case 'no prazo':
            return 'no-prazo';
        case 'em risco':
            return 'em-risco';
        case 'concluído':
            return 'concluida';
        default:
            return '';
    }
}

function getProgressColor(status) {
    if (!status) return '#9ca3af';
    
    switch (status.toLowerCase()) {
        case 'no prazo':
            return '#10b981';
        case 'em risco':
            return '#ef4444';
        case 'concluído':
            return '#3b82f6';
        case 'não iniciado':
            return '#9ca3af';
        case 'em andamento':
            return '#f59e0b';
        default:
            return '#9ca3af';
    }
}

function getStatusIcon(status) {
    if (!status) return '';
    
    switch (status.toLowerCase()) {
        case 'no prazo':
            return '<i class="fas fa-check-circle"></i> ';
        case 'em risco':
            return '<i class="fas fa-exclamation-circle"></i> ';
        case 'concluído':
            return '<i class="fas fa-check-double"></i> ';
        case 'não iniciado':
            return '<i class="fas fa-clock"></i> ';
        case 'em andamento':
            return '<i class="fas fa-spinner"></i> ';
        default:
            return '';
    }
}

// Manipuladores de eventos
function handleSearch() {
    const searchInput = document.getElementById('searchInput');
    const searchTerm = searchInput.value.toLowerCase();
    
    if (searchTerm === '') {
        loadInitiatives();
        return;
    }
    
    const filteredInitiatives = initiatives.filter(initiative => 
        initiative.Iniciativas.toLowerCase().includes(searchTerm) ||
        (initiative.Descrição && initiative.Descrição.toLowerCase().includes(searchTerm))
    );
    
    loadInitiatives(filteredInitiatives);
}

function toggleExpandAll() {
    const expandAllBtn = document.getElementById('expandAllBtn');
    const detailsElements = document.querySelectorAll('.initiative-details');
    const chevrons = document.querySelectorAll('.initiative-title i');
    
    allExpanded = !allExpanded;
    
    if (allExpanded) {
        expandAllBtn.innerHTML = '<i class="fas fa-chevron-up"></i> Recolher Todos';
        detailsElements.forEach(el => el.classList.add('active'));
        chevrons.forEach(icon => {
            icon.classList.remove('fa-chevron-right');
            icon.classList.add('fa-chevron-down');
        });
    } else {
        expandAllBtn.innerHTML = '<i class="fas fa-chevron-down"></i> Expandir Todos';
        detailsElements.forEach(el => el.classList.remove('active'));
        chevrons.forEach(icon => {
            icon.classList.remove('fa-chevron-down');
            icon.classList.add('fa-chevron-right');
        });
    }
}

function openEditModal(initiativeId) {
    const editModal = document.getElementById('editModal');
    currentInitiative = initiatives.find(i => i.id === initiativeId);
    
    if (!currentInitiative) return;
    
    // Preencher o formulário
    document.getElementById('editNome').value = currentInitiative.Iniciativas;
    document.getElementById('editDescricao').value = currentInitiative.Descrição || '';
    document.getElementById('editPorta').value = currentInitiative.Porta || '';
    document.getElementById('editFarol').value = currentInitiative.FAROL_NO_TRIMESTRE || '';
    document.getElementById('editLider').value = currentInitiative.LÍDER || '';
    document.getElementById('editObservacoes').value = currentInitiative.OBSERVAÇÕES || '';
    
    // Preencher resultados
    resultadosList = [...(currentInitiative.Resultados || [])];
    const resultadosContainer = document.getElementById('resultadosContainer');
    resultadosContainer.innerHTML = '';
    
    resultadosList.forEach((resultado, index) => {
        const resultadoRow = document.createElement('div');
        resultadoRow.className = 'item-row';
        resultadoRow.innerHTML = `
            <input type="text" value="${resultado.texto}" readonly>
            <button type="button" class="remove-item" data-index="${index}">
                <i class="fas fa-times"></i>
            </button>
        `;
        resultadosContainer.appendChild(resultadoRow);
    });
    
    // Adicionar event listeners para remover resultados
    document.querySelectorAll('#resultadosContainer .remove-item').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const index = parseInt(e.currentTarget.getAttribute('data-index'));
            resultadosList.splice(index, 1);
            e.currentTarget.parentElement.remove();
            updateRemoveButtons('#resultadosContainer');
        });
    });
    
    // Preencher metas
    metasList = [...(currentInitiative.Metas || [])];
    const metasContainer = document.getElementById('metasContainer');
    metasContainer.innerHTML = '';
    
    metasList.forEach((meta, index) => {
        const metaRow = document.createElement('div');
        metaRow.className = 'item-row';
        metaRow.innerHTML = `
            <input type="text" value="${meta.texto}" readonly>
            <span class="meta-semestre">${meta.semestre}</span>
            <button type="button" class="remove-item" data-index="${index}">
                <i class="fas fa-times"></i>
            </button>
        `;
        metasContainer.appendChild(metaRow);
    });
    
    // Adicionar event listeners para remover metas
    document.querySelectorAll('#metasContainer .remove-item').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const index = parseInt(e.currentTarget.getAttribute('data-index'));
            metasList.splice(index, 1);
            e.currentTarget.parentElement.remove();
            updateRemoveButtons('#metasContainer');
        });
    });
    
    // Preencher dropdown de resultados para novas metas
    const newMetaResultado = document.getElementById('newMetaResultado');
    newMetaResultado.innerHTML = '';
    resultadosList.forEach(resultado => {
        const option = document.createElement('option');
        option.value = resultado.id;
        option.textContent = resultado.texto.substring(0, 50) + (resultado.texto.length > 50 ? '...' : '');
        newMetaResultado.appendChild(option);
    });
    
    editModal.style.display = 'block';
}

function openEditMetaModal(initiativeId, metaId) {
    const editMetaModal = document.getElementById('editMetaModal');
    currentInitiative = initiatives.find(i => i.id === initiativeId);
    
    if (!currentInitiative || !currentInitiative.Metas) return;
    
    const meta = currentInitiative.Metas.find(m => m.id === metaId);
    if (!meta) return;
    
    currentMetaIndex = metaId;
    
    // Preencher o formulário
    document.getElementById('metaText').value = meta.
